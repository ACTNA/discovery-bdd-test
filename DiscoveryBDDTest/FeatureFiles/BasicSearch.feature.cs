// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DiscoveryBDDTest.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BasicSearch")]
    public partial class BasicSearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BasicSearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "BasicSearch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("Given I am on Discovery Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_searchWithDifferentKeyWords")]
        [NUnit.Framework.TestCaseAttribute("James", null)]
        [NUnit.Framework.TestCaseAttribute("WO 95", null)]
        [NUnit.Framework.TestCaseAttribute("Fredrick", null)]
        public virtual void BS_SearchWithDifferentKeyWords(string keyword, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_searchWithDifferentKeyWords", null, exampleTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 7
 testRunner.When(string.Format("I enter \"{0}\"", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("results should contain \"{0}\"", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_FilterResult_VerifyCollectionAndSubjects")]
        [NUnit.Framework.TestCaseAttribute("*", "WO", "C10092", null)]
        [NUnit.Framework.TestCaseAttribute("*", "BT", "C10060", null)]
        public virtual void BS_FilterResult_VerifyCollectionAndSubjects(string word, string collectionModule, string subjectsModule, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_FilterResult_VerifyCollectionAndSubjects", " In the subject module C10092 is Army and C10060 is Medals", exampleTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 18
 testRunner.When(string.Format("enter \"{0}\", filter by TNA", word), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then(string.Format("check for the \"{0}\",\"{1}\" got particular number of records", collectionModule, subjectsModule), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_GreaterThan10000_ExportFirst1000RecordsAsHtmlCsvXml")]
        [NUnit.Framework.TestCaseAttribute("AB", "CSV", null)]
        [NUnit.Framework.TestCaseAttribute("Adam", "HTML", null)]
        [NUnit.Framework.TestCaseAttribute("Department", "XML", null)]
        public virtual void BS_GreaterThan10000_ExportFirst1000RecordsAsHtmlCsvXml(string keyword, string selectFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_GreaterThan10000_ExportFirst1000RecordsAsHtmlCsvXml", null, exampleTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 27
 testRunner.When(string.Format("I enter \"{0}\", check the total number of records and record creators are not zero" +
                        "", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And("check for the sorting is only enabled message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And(string.Format("Export results in \"{0}\"", selectFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("we are able to download and check the file that has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_GreaterThan10000_ExportFirst1000RecordCreatorsAsHtmlCsvXml")]
        [NUnit.Framework.TestCaseAttribute("England", "CSV", null)]
        [NUnit.Framework.TestCaseAttribute("Wales", "HTML", null)]
        [NUnit.Framework.TestCaseAttribute("Scotland", "XML", null)]
        public virtual void BS_GreaterThan10000_ExportFirst1000RecordCreatorsAsHtmlCsvXml(string keyword, string selectFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_GreaterThan10000_ExportFirst1000RecordCreatorsAsHtmlCsvXml", null, exampleTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 39
 testRunner.When(string.Format("I enter \"{0}\", check the total number of records and record creators are not zero" +
                        "", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.And(string.Format("go to record creators and Export results in \"{0}\"", selectFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.Then("we are able to download and check the file that has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_LessThan10000_ExportFirst1000RecordCreators_sort_AsXmlHtmlCsv")]
        [NUnit.Framework.TestCaseAttribute("soldier", "Title - descending", "CSV", null)]
        [NUnit.Framework.TestCaseAttribute("prison", "Title - ascending", "HTML", null)]
        [NUnit.Framework.TestCaseAttribute("Medical service", "Date - descending", "XML", null)]
        public virtual void BS_LessThan10000_ExportFirst1000RecordCreators_Sort_AsXmlHtmlCsv(string keyword, string sortedBy, string selectFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_LessThan10000_ExportFirst1000RecordCreators_sort_AsXmlHtmlCsv", null, exampleTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 50
 testRunner.When(string.Format("I enter \"{0}\", check the total number of records and record creators are not zero" +
                        "", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.And(string.Format("go to record creators,select \"{0}\", select \"{1}\" under export results", sortedBy, selectFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.Then("we are able to download and check the file that has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_LessThan10000_ExportFirst1000Records_Sort_AsXmlHtmlCsv")]
        [NUnit.Framework.TestCaseAttribute("common wealth", "Reference", "CSV", null)]
        [NUnit.Framework.TestCaseAttribute("Trade with Japan", "Title - ascending", "HTML", null)]
        [NUnit.Framework.TestCaseAttribute("hms wolfhound", "Date - descending", "XML", null)]
        [NUnit.Framework.TestCaseAttribute("Robert parker", "Relevance", "HTML", null)]
        public virtual void BS_LessThan10000_ExportFirst1000Records_Sort_AsXmlHtmlCsv(string keyword, string sortedBy, string selectFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_LessThan10000_ExportFirst1000Records_Sort_AsXmlHtmlCsv", null, exampleTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 61
 testRunner.When(string.Format("I enter \"{0}\", check the total number of records and record creators are not zero" +
                        "", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.And(string.Format("go to simple view, select \"{0}\", select \"{1}\" under export results", sortedBy, selectFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.Then("we are able to download and check the file that has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_LessThan10000_ExportAllRecordsAsCSV")]
        [NUnit.Framework.TestCaseAttribute("richmond society", "records-tab", "Reference", null)]
        [NUnit.Framework.TestCaseAttribute("Bahamas John", "name-authorities-tab", "Title - ascending", null)]
        public virtual void BS_LessThan10000_ExportAllRecordsAsCSV(string keyword, string recordsTab, string sortedBy, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_LessThan10000_ExportAllRecordsAsCSV", null, exampleTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 73
 testRunner.When(string.Format("I enter \"{0}\", check the total number of records and record creators are not zero" +
                        "", keyword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.And(string.Format("go to \"{0}\" select \"{1}\", select all records as spreadsheet(CSV) under export res" +
                        "ults", recordsTab, sortedBy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.Then("we are able to download and check the file that has been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_NoOfRecordsPerPage15And30And60")]
        [NUnit.Framework.TestCaseAttribute("commissions", "30", null)]
        [NUnit.Framework.TestCaseAttribute("Abraham", "60", null)]
        public virtual void BS_NoOfRecordsPerPage15And30And60(string keyword, string numberOfItemsPerPage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_NoOfRecordsPerPage15And30And60", null, exampleTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 83
 testRunner.When(string.Format("I enter \"{0}\", click on \"{1}\" on the bottom", keyword, numberOfItemsPerPage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then(string.Format("the number of records displaying per page should be \"{0}\"", numberOfItemsPerPage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordCreator_filterresult")]
        public virtual void BS_RecordCreator_Filterresult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordCreator_filterresult", null, ((string[])(null)));
#line 91
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 92
 testRunner.When("I enter \"*\", go to record creators tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("I can see the filters Organisation, person, business, Manor, Family, Diaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedInTheLast6months")]
        public virtual void BS_RecordOpenedInTheLast6Months()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedInTheLast6months", null, ((string[])(null)));
#line 95
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 96
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.And("click on opened in the last six months under Record opening date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.Then("click on the first record and check the record opening date should be in the last" +
                    " six months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedInTheLast12months")]
        public virtual void BS_RecordOpenedInTheLast12Months()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedInTheLast12months", null, ((string[])(null)));
#line 100
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 101
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.And("click on opened in the last twelve months under Record opening date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.Then("click on the first record and check the record opening date should be in the last" +
                    " twelve months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedInTheLastWeek")]
        public virtual void BS_RecordOpenedInTheLastWeek()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedInTheLastWeek", null, ((string[])(null)));
#line 105
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 106
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.And("click on opened in the last week under Record opening date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.Then("click on the first record and check the record opening date should be in the last" +
                    " week", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedInTheLastDay")]
        public virtual void BS_RecordOpenedInTheLastDay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedInTheLastDay", null, ((string[])(null)));
#line 110
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 111
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.And("click on opened during the last day under Record opening date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.Then("click on the first record and check the record opening date should be yesterday", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedOnASpecificDate")]
        [NUnit.Framework.TestCaseAttribute("14/08/2019", null)]
        [NUnit.Framework.TestCaseAttribute("04/04/2018", null)]
        public virtual void BS_RecordOpenedOnASpecificDate(string specificDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedOnASpecificDate", null, exampleTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 116
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.And(string.Format("enter \"{0}\" under Record opening date", specificDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.Then(string.Format("click on the first record and check the record opening date should be \"{0}\"", specificDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordOpenedWithinADateRange")]
        [NUnit.Framework.TestCaseAttribute("01/04/2018", "01/02/2019", null)]
        [NUnit.Framework.TestCaseAttribute("20/05/2017", "03/10/2018", null)]
        public virtual void BS_RecordOpenedWithinADateRange(string fromDate, string toDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordOpenedWithinADateRange", null, exampleTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 126
 testRunner.When("enter \"*\", filter by TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.And(string.Format("enter \"{0}\", \"{1}\" for date range under Record opening date", fromDate, toDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.Then(string.Format("click on the first record and check the record opening date should be with in the" +
                        " range \"{0}\", \"{1}\"", fromDate, toDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BS_RecordsAndRecordCreatorsDatesUnknown")]
        public virtual void BS_RecordsAndRecordCreatorsDatesUnknown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BS_RecordsAndRecordCreatorsDatesUnknown", null, ((string[])(null)));
#line 135
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 136
 testRunner.When("enter \"*\", I am under Records tab check for the filter Dates unknown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("I am under record creators tab check for the filter Dates unknown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
