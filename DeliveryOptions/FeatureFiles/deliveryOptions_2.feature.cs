// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DeliveryOptions.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("deliveryOptions_2")]
    public partial class DeliveryOptions_2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "deliveryOptions_2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "deliveryOptions_2", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AcademicSubscriptionStaffin")]
        [NUnit.Framework.CategoryAttribute("wip")]
        [NUnit.Framework.TestCaseAttribute("C2849839", "Ask a member of staff if you need help finding this record", "(//div[@class=\'order-option-wrapper\'])[1]", "The National Archives", null)]
        public virtual void AcademicSubscriptionStaffin(string iaId, string message, string xPath, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wip"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AcademicSubscriptionStaffin", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AcademicSubscriptionOnsiteOffsite")]
        [NUnit.Framework.TestCaseAttribute("C2849839", "(//div[@class=\'order-option-wrapper\'])[2]", "This record may also be available on other websites", "Adam Matthew", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2849839", "(//div[@class=\'order-option-wrapper\'])[2]", "This record may also be available on other websites", "Visit Adam Matthew", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2849839", "(//div[@class=\'order-option-wrapper\'])[3]", "Request a quote for a copy to be sent to you via email or post (£)", "Order a copy", "Page Check Request", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        public virtual void AcademicSubscriptionOnsiteOffsite(string iaId, string xPath, string message, string button, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AcademicSubscriptionOnsiteOffsite", null, tagsOfScenario, argumentsOfScenario);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.And(string.Format("check the \"{0}\" onsite or offsite \"{1}\"", xPath, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AccessUnderReviewStaffin")]
        [NUnit.Framework.TestCaseAttribute("C4216021", "This record is closed whilst access is under review", "(//div[@class=\'order-option-wrapper\'])", "Submit FOI request", "Contact us", null)]
        [NUnit.Framework.TestCaseAttribute("C5040641", "This record is closed whilst access is under review", "(//div[@class=\'order-option-wrapper\'])", "Submit FOI request", "Contact us", null)]
        [NUnit.Framework.TestCaseAttribute("C1960950", "This record is closed whilst access is under review", "(//div[@class=\'order-option-wrapper\'])", "Submit FOI request", "Contact us", null)]
        public virtual void AccessUnderReviewStaffin(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AccessUnderReviewStaffin", null, tagsOfScenario, argumentsOfScenario);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AV_Media")]
        [NUnit.Framework.TestCaseAttribute("C14016274", "View this on the Discovery Video Player", "(//div[@class=\'order-option-wrapper\'])", "Discovery Video Player", "Video:", null)]
        [NUnit.Framework.TestCaseAttribute("C14016274", "View this on the Discovery Video Player", "(//div[@class=\'order-option-wrapper\'])", "Visit Discovery Video Player", "Video:", null)]
        [NUnit.Framework.TestCaseAttribute("C14016322", "View this on the Discovery Video Player", "(//div[@class=\'order-option-wrapper\'])", "Discovery Video Player", "Video:", null)]
        [NUnit.Framework.TestCaseAttribute("C14016322", "View this on the Discovery Video Player", "(//div[@class=\'order-option-wrapper\'])", "Visit Discovery Video Player", "Video:", null)]
        public virtual void AV_Media(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AV_Media", null, tagsOfScenario, argumentsOfScenario);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ClosedFOIReview")]
        [NUnit.Framework.TestCaseAttribute("C10853769", "(//div[@class=\'order-option-wrapper\'])", "This record is closed", "Submit FOI request", "Contact us", null)]
        [NUnit.Framework.TestCaseAttribute("C4633754", "(//div[@class=\'order-option-wrapper\'])", "This record is closed", "Submit FOI request", "Contact us", null)]
        public virtual void ClosedFOIReview(string iaId, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ClosedFOIReview", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ClosedRetainedDeptKnown")]
        [NUnit.Framework.TestCaseAttribute("C11362729", "(//div[@class=\'order-option-wrapper\'])", "This record is closed and retained by Department for Business, Energy and Industr" +
            "ial Strategy", "Visit the department website", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C11362729", "(//div[@class=\'order-option-wrapper\'])", "This record is closed and retained by Department for Business, Energy and Industr" +
            "ial Strategy", "Department for Business, Energy and Industrial Strategy", "The National Archives", null)]
        public virtual void ClosedRetainedDeptKnown(string iaId, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ClosedRetainedDeptKnown", null, tagsOfScenario, argumentsOfScenario);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ClosedRetainedDeptUnKnown")]
        [NUnit.Framework.TestCaseAttribute("C3836961", "(//div[@class=\'order-option-wrapper\'])", "This record is retained by a government department", "Contact us", "The National Archives", null)]
        public virtual void ClosedRetainedDeptUnKnown(string iaId, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ClosedRetainedDeptUnKnown", null, tagsOfScenario, argumentsOfScenario);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ClosedRetainedDeptUnKnown_contactUs")]
        [NUnit.Framework.TestCaseAttribute("C3836961", "The National Archives", null)]
        public virtual void ClosedRetainedDeptUnKnown_ContactUs(string iaId, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ClosedRetainedDeptUnKnown_contactUs", null, tagsOfScenario, argumentsOfScenario);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 85
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.When("I click on contact us button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectionCareStaffin")]
        [NUnit.Framework.TestCaseAttribute("C543521", "This record requires supervised handling in Collection Care", "(//div[@class=\'order-option-wrapper\'])[1]", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C543521", "Please contact a member of staff to arrange a viewing.", "(//div[@class=\'order-option-description\'])[1]", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C543521", "Appointments are available from Tuesday to Friday at 11.00am or 2.00pm, are limit" +
            "ed to two hours and are subject to availability", "(//div[@class=\'order-option-description\'])[1]", "The National Archives", null)]
        public virtual void CollectionCareStaffin(string iaId, string message, string xPath, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectionCareStaffin", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CollectionCareOnSiteOffSite")]
        [NUnit.Framework.TestCaseAttribute("C543521", "(//div[@class=\'order-option-wrapper\'])[2]", "This record requires supervised handling in Collection Care", "", "", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        [NUnit.Framework.TestCaseAttribute("C543521", "(//div[@class=\'order-option-wrapper\'])[2]", "Appointments are available from Tuesday to Friday at 11.00am or 2.00pm, are limit" +
            "ed to two hours and are subject to availability.", "", "", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        [NUnit.Framework.TestCaseAttribute("C543521", "(//div[@class=\'order-option-wrapper\'])[3]", "This record requires supervised handling in Collection Care", "contact", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        [NUnit.Framework.TestCaseAttribute("C543521", "(//div[@class=\'order-option-wrapper\'])[3]", "Appointments are available from Tuesday to Friday at 11.00am or 2.00pm, are limit" +
            "ed to two hours and are subject to availability.", "Contact us", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        public virtual void CollectionCareOnSiteOffSite(string iaId, string xPath, string message, string button, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CollectionCareOnSiteOffSite", null, tagsOfScenario, argumentsOfScenario);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.And(string.Format("check the \"{0}\" onsite or offsite \"{1}\"", xPath, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedAvailableButNotDownloadableAtItemLevel")]
        [NUnit.Framework.TestCaseAttribute("C6208104", "This record has been digitised as part of the larger record", "//div[@class=\'order-option-wrapper\']", "Go to record", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C6208104", "", "", "Ancestry", "The National Archives", null)]
        public virtual void DigitizedAvailableButNotDownloadableAtItemLevel(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedAvailableButNotDownloadableAtItemLevel", null, tagsOfScenario, argumentsOfScenario);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 119
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.And("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedAvailableButNotDownloadableAtItemLevelMoreWaysToViewThisRecord")]
        [NUnit.Framework.TestCaseAttribute("C6208104", null)]
        public virtual void DigitizedAvailableButNotDownloadableAtItemLevelMoreWaysToViewThisRecord(string iaId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedAvailableButNotDownloadableAtItemLevelMoreWaysToViewThisRecord", null, tagsOfScenario, argumentsOfScenario);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 131
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
 testRunner.When("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.And("I should see Also available from: Ancestry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.Then("Hide More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.And("I shouldn\'t see Also available from: Ancestry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedAvailableButNotDownloadableAtPieceLevel")]
        [NUnit.Framework.TestCaseAttribute("C1905025", "This record has been digitised as part of multiple records", "//div[@class=\'order-option-wrapper\']", "Go to browse", "Browse records of other archives", null)]
        [NUnit.Framework.TestCaseAttribute("C1905025", "", "", "The Genealogist", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C1905025", "", "", "Ancestry", "The National Archives", null)]
        public virtual void DigitizedAvailableButNotDownloadableAtPieceLevel(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedAvailableButNotDownloadableAtPieceLevel", null, tagsOfScenario, argumentsOfScenario);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 142
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.And("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedAvailableButNotDownloadableAtPieceLevelMoreWaysToViewThisRecord")]
        [NUnit.Framework.TestCaseAttribute("C1905025", null)]
        public virtual void DigitizedAvailableButNotDownloadableAtPieceLevelMoreWaysToViewThisRecord(string iaId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedAvailableButNotDownloadableAtPieceLevelMoreWaysToViewThisRecord", null, tagsOfScenario, argumentsOfScenario);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
 testRunner.When("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
 testRunner.And("I should see Also available from:  The Genealogist Ancestry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.Then("Hide More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.And("I shouldn\'t see Also available from: The Genealogist Ancestry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedDiscoveryStaffin")]
        [NUnit.Framework.TestCaseAttribute("C7351413", "Download this record", "(//div[@class=\'order-option-wrapper\'])", "Download now", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C198022", "Download this record", "(//div[@class=\'order-option-wrapper\'])", "Download now", "The National Archives", null)]
        public virtual void DigitizedDiscoveryStaffin(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedDiscoveryStaffin", null, tagsOfScenario, argumentsOfScenario);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedDiscoveryOnsiteOffsite")]
        [NUnit.Framework.TestCaseAttribute("C7351413", "(//div[@class=\'order-option-wrapper\'])[2]", "Ordering and viewing options", "Add to basket", "", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", null)]
        [NUnit.Framework.TestCaseAttribute("C198022", "(//div[@class=\'order-option-wrapper\'])[2]", "Download size approximately", "Add to basket", "", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", null)]
        public virtual void DigitizedDiscoveryOnsiteOffsite(string iaId, string xPath, string message, string button, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedDiscoveryOnsiteOffsite", null, tagsOfScenario, argumentsOfScenario);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 177
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
 testRunner.And("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And(string.Format("check the \"{0}\" onsite or offsite \"{1}\"", xPath, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
 testRunner.And("check the basket has one item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedDiscoveryMoreWaysToViewThisRecord")]
        [NUnit.Framework.TestCaseAttribute("C7351413", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", null)]
        [NUnit.Framework.TestCaseAttribute("C198022", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", null)]
        public virtual void DigitizedDiscoveryMoreWaysToViewThisRecord(string iaId, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedDiscoveryMoreWaysToViewThisRecord", null, tagsOfScenario, argumentsOfScenario);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 190
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
 testRunner.And("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.And("I should see Available to view free at TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.Then("Hide More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
 testRunner.And("I shouldn\'t see Available to view free at TNA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedLia")]
        [NUnit.Framework.TestCaseAttribute("C2490774", "This is available to download from The Genealogist", "(//div[@class=\'order-option-wrapper\'])[1]", "The Genealogist", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "", "", "Visit The Genealogist", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "This is available to download from The Genealogist", "(//div[@class=\'order-option-wrapper\'])[2]", "", "", null)]
        public virtual void DigitizedLia(string iaId, string message, string xPath, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedLia", null, tagsOfScenario, argumentsOfScenario);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 203
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 204
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedLiaMoreWaysToViewThisRecord")]
        [NUnit.Framework.TestCaseAttribute("C2490774", "Ancestry", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "BMD Registers", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "Available to view free at The National Archives", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "Ancestry[2]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        public virtual void DigitizedLiaMoreWaysToViewThisRecord(string iaId, string button, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedLiaMoreWaysToViewThisRecord", null, tagsOfScenario, argumentsOfScenario);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 215
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 216
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.And("click on More ways to view this record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedLiaMoreWaysToViewThisRecordoffsite")]
        [NUnit.Framework.TestCaseAttribute("C2490774", "(//a[contains(text(),\'The Genealogist\')])[3]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "(//a[contains(text(),\'Visit The Genealogist\')])[2]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "(//a[contains(text(),\'Ancestry\')])[2]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "(//a[contains(text(),\'BMD Registers\')])[2]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        [NUnit.Framework.TestCaseAttribute("C2490774", "//a[contains(text(),\'Available to view free at The National Archives\')]", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[3]", null)]
        public virtual void DigitizedLiaMoreWaysToViewThisRecordoffsite(string iaId, string xpath, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xpath", xpath);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedLiaMoreWaysToViewThisRecordoffsite", null, tagsOfScenario, argumentsOfScenario);
#line 228
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 229
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 230
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 231
 testRunner.And("I click on More ways to view this record for offsite", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.And(string.Format("click on \"{0}\" for offsite", xpath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedOther")]
        [NUnit.Framework.TestCaseAttribute("C1847980", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "Findmypast", "The National Archives", null)]
        public virtual void DigitizedOther(string iaId, string xPathDO, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedOther", null, tagsOfScenario, argumentsOfScenario);
#line 243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 244
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 245
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 246
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 247
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DigitizedOtherOffsite")]
        [NUnit.Framework.TestCaseAttribute("C1847980", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "(//a[contains(text(),\'Findmypast\')])[2]", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C1847980", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "//a[contains(text(),\'Available to view free at The National Archives\')]", "The National Archives", null)]
        public virtual void DigitizedOtherOffsite(string iaId, string xPathDO, string xpath, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xpath", xpath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DigitizedOtherOffsite", null, tagsOfScenario, argumentsOfScenario);
#line 253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 254
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 255
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 256
 testRunner.And("I click on More ways to view this record for offsite", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
 testRunner.And(string.Format("click on \"{0}\" for offsite", xpath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DisplayAtMuseum")]
        [NUnit.Framework.TestCaseAttribute("C393557", "Contact us to find out if you can view a copy at The National Archives.", "(//div[@class=\'order-option-wrapper\'])[1]", "the Keepers’ Gallery", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        [NUnit.Framework.TestCaseAttribute("C393557", "Contact us to find out if you can view a copy at The National Archives.", "(//div[@class=\'order-option-wrapper\'])[1]", "Contact us", "The National Archives", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        [NUnit.Framework.TestCaseAttribute("C393557", "Ask a member of staff if you can view a copy of this record", "(//div[@class=\'order-option-wrapper\'])[2]", "", "", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", null)]
        public virtual void DisplayAtMuseum(string iaId, string message, string xPath, string button, string title, string xPathDO, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DisplayAtMuseum", null, tagsOfScenario, argumentsOfScenario);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 266
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 267
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 268
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 269
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DisplayAtMuseumOffSite")]
        [NUnit.Framework.TestCaseAttribute("C393557", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//a[contains(text(),\'Contact us\')])[3]", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C393557", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//a[contains(text(),\'the Keepers’ Gallery\')])[2]", "The National Archives", null)]
        public virtual void DisplayAtMuseumOffSite(string iaId, string xPathDO, string xpath, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xpath", xpath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DisplayAtMuseumOffSite", null, tagsOfScenario, argumentsOfScenario);
#line 278
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 279
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 280
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 281
 testRunner.And(string.Format("click on \"{0}\" for offsite", xpath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 282
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FileAuthority")]
        [NUnit.Framework.TestCaseAttribute("F133246", "The National Archives", null)]
        public virtual void FileAuthority(string iaId, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FileAuthority", null, tagsOfScenario, argumentsOfScenario);
#line 289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 290
 testRunner.Given(string.Format("I am on delivery options page for fileAuthority \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 291
 testRunner.When("click on view details of this record creator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 292
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GovtWebArchive")]
        [NUnit.Framework.TestCaseAttribute("C16665", "This record is held by the UK Government Web Archive", "(//div[@class=\'order-option-wrapper\'])", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C16665", "Find a link in the catalogue description to the archived website that holds the r" +
            "ecord", "(//div[@class=\'order-option-wrapper\'])", "The National Archives", null)]
        public virtual void GovtWebArchive(string iaId, string message, string xPath, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GovtWebArchive", null, tagsOfScenario, argumentsOfScenario);
#line 298
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 299
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 300
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("invigilationSafeRoom")]
        [NUnit.Framework.TestCaseAttribute("C4771662", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[1]", "You can view this record under supervision in our Invigilation Room", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4780207", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[1]", "Your order will take approximately 45 minutes to be prepared", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4771662", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[2]", "You can view this record under supervision in our Invigilation Room", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4780207", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[2]", "You must have a reader\'s ticket to order this record", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4771662", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record can only be seen under supervision at The National Archives", "Copy this record", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4780207", "//a[contains(text(),\'View delivery options presented to other users\')]", "(//div[@class=\'order-option-wrapper\'])[3]", "You must have a reader\'s ticket to view this record", "Order in advance", "The National Archives", null)]
        public virtual void InvigilationSafeRoom(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("invigilationSafeRoom", null, tagsOfScenario, argumentsOfScenario);
#line 308
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 309
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 310
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 312
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 313
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("InUse")]
        [NUnit.Framework.TestCaseAttribute("C4771085", "(//div[@class=\'order-option-wrapper\'])[1]", "This record is currently in use", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "order records in advance", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4771085", "(//div[@class=\'order-option-wrapper\'])[1]", "Talk to a member of staff to find out when it may be free", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "visit Kew", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4771085", "(//div[@class=\'order-option-wrapper\'])[2]", "This record has not been digitised and cannot be downloaded", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4771085", "(//div[@class=\'order-option-wrapper\'])[2]", "You can order records in advance to be ready for you when you visit Kew", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "Order in advance", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4771085", "(//div[@class=\'order-option-wrapper\'])[2]", "Or, you can request a quotation for a copy to be sent to you.", "//div[@id=\'staffViewOfOtherUserDOsWrapper\']/a", "Request a copy", "Page Check Request", null)]
        public virtual void InUse(string iaId, string xPath, string message, string xPathDO, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("InUse", null, tagsOfScenario, argumentsOfScenario);
#line 324
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 325
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 326
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 327
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 329
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LocalArchive")]
        [NUnit.Framework.TestCaseAttribute("C1699211", "(//div[@class=\'order-option-wrapper\'])", "This record is held by National Maritime Museum: The Caird Library and Archive", "See contact details", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C14520556", "(//div[@class=\'order-option-wrapper\'])", "This record is held by National Maritime Museum: The Caird Library and Archive", "See contact details", "The National Archives", null)]
        public virtual void LocalArchive(string iaId, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LocalArchive", null, tagsOfScenario, argumentsOfScenario);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 340
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 342
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 343
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MissingLost")]
        [NUnit.Framework.TestCaseAttribute("C2547266", "(//div[@class=\'order-option-wrapper\'])", "This record is missing and is unavailable", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2547266", "(//div[@class=\'order-option-wrapper\'])", "Additional information may be found in the catalogue description", "The National Archives", null)]
        public virtual void MissingLost(string iaId, string xPath, string message, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MissingLost", null, tagsOfScenario, argumentsOfScenario);
#line 350
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 351
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 352
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 353
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MouldTreatment")]
        [NUnit.Framework.TestCaseAttribute("C4364677", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[1]", "Please contact a member of staff to request a specialist assessment.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4364677", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[2]", "This record requires treatment for mould", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4364677", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record requires treatment for mould", "contact", "Contact us", null)]
        [NUnit.Framework.TestCaseAttribute("C4364677", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[3]", "Please contact The National Archives to request a specialist assessment.", "Contact us", "Contact us", null)]
        public virtual void MouldTreatment(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MouldTreatment", null, tagsOfScenario, argumentsOfScenario);
#line 360
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 361
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 362
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 363
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 364
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 365
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("offSite")]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[1]", "You may place an advanced order request to see this record at The National Archiv" +
            "es. It will take three working days to bring this record to The National Archive" +
            "s.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[2]", "You may place an advanced order request to see this record at The National Archiv" +
            "es. It will take three working days to bring this record to The National Archive" +
            "s.", "Advanced order", "Order documents in advance", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record has not been digitised and cannot be downloaded", "order records in advance", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record is stored off site and will take three working days to be delivered t" +
            "o The National Archives.", "visit Kew", "Visit us", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[3]", "You can order records in advance to be ready for you when you visit Kew.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[3]", "Or, you can request a quotation for a copy to be sent to you.", "Order in advance", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C2698319", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[5]", "(//div[@class=\'order-option-wrapper\'])[3]", "Please order before 11:00 three working days in advance of your visit.", "Order a copy", "Page Check Request", null)]
        public virtual void OffSite(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("offSite", null, tagsOfScenario, argumentsOfScenario);
#line 374
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 375
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 376
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 377
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 378
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 379
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("PaidSearch")]
        [NUnit.Framework.TestCaseAttribute("90ad00a1aa6149efa3991fab6037a5ec", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[1]", "To request a search of closed records you are required to upload documents as pro" +
            "of that the person is no longer living.", "Request a search of closed records", "Request a search of closed records", null)]
        public virtual void PaidSearch(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PaidSearch", null, tagsOfScenario, argumentsOfScenario);
#line 391
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 392
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 393
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 394
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 395
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 396
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Surrogate")]
        [NUnit.Framework.TestCaseAttribute("C2050263", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[1]", "Ask a member of staff if you need help finding this record.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C9188919", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[2]", "Ask a member of staff if you need help finding this record.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C3000330", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record has not been digitised and cannot be downloaded.", "Order a copy", "Page Check Request", null)]
        public virtual void Surrogate(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Surrogate", null, tagsOfScenario, argumentsOfScenario);
#line 402
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 403
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 404
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 405
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 406
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 407
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TooLargeToCopyOriginal")]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[1]", "Your order will take approximately 45 minutes to be prepared.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[2]", "This document is either too large or of a condition or media type that means that" +
            " our record copying services are unable to provide a copy.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[2]", "This record is available to order and view", "Image Library", "The National Archives", null)]
        public virtual void TooLargeToCopyOriginal(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TooLargeToCopyOriginal", null, tagsOfScenario, argumentsOfScenario);
#line 415
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 416
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 417
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 418
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 420
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TooLargeToCopyOriginalOffSite")]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[3]", "This document is either too large or of a condition or media type that means that" +
            " our record copying services are unable to provide a copy.", "order records in advance", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[3]", "Our Image Library may be able to provide you with a specialist quote.", "visit Kew", "Visit us", null)]
        [NUnit.Framework.TestCaseAttribute("C4560825", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[4]", "(//div[@class=\'order-option-wrapper\'])[3]", "You can order records in advance to be ready for you when you visit Kew", "Order in advance", "The National Archives", null)]
        public virtual void TooLargeToCopyOriginalOffSite(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TooLargeToCopyOriginalOffSite", null, tagsOfScenario, argumentsOfScenario);
#line 428
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 429
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 430
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 431
 testRunner.And("scroll down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 433
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 434
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TooLargeToCopySurrogate")]
        [NUnit.Framework.TestCaseAttribute("C6934963", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[1]", "Ask a member of staff if you need help finding this record.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C6934963", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[2]", "Ask a member of staff if you need help finding this record.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C6934963", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record has not been digitised and cannot be downloaded.", "Order a copy", "Page Check Request", null)]
        [NUnit.Framework.TestCaseAttribute("C8135237", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[1]", "Ask a member of staff if you need help finding this record.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C8135237", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[2]", "Ask a member of staff if you need help finding this record.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C8135237", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record has not been digitised and cannot be downloaded.", "Order a copy", "Page Check Request", null)]
        [NUnit.Framework.TestCaseAttribute("C8135239", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[1]", "Ask a member of staff if you need help finding this record.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C8135239", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[2]", "Ask a member of staff if you need help finding this record.", "reader\'s ticket", "The National Archives", null)]
        [NUnit.Framework.TestCaseAttribute("C8135239", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[1]", "(//div[@class=\'order-option-wrapper\'])[3]", "This record has not been digitised and cannot be downloaded.", "Order a copy", "Page Check Request", null)]
        public virtual void TooLargeToCopySurrogate(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TooLargeToCopySurrogate", null, tagsOfScenario, argumentsOfScenario);
#line 442
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 443
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 444
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 445
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 447
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("UnAvailable")]
        [NUnit.Framework.TestCaseAttribute("C11692008", "This record is not available to order. More information may be available in the c" +
            "atalogue description.", "(//div[@class=\'order-option-wrapper\'])", "The National Archives", null)]
        public virtual void UnAvailable(string iaId, string message, string xPath, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UnAvailable", null, tagsOfScenario, argumentsOfScenario);
#line 461
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 462
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 463
 testRunner.When(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 464
 testRunner.Then(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unfit")]
        [NUnit.Framework.TestCaseAttribute("C513426", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[1]", "In rare cases, access might not be possible. Please contact a member of staff to " +
            "request a specialist assessment.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C513426", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[2]", "In rare cases, access might not be possible. Please contact a member of staff to " +
            "request a specialist assessment.", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("C513426", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[3]", "In rare cases, access might not be possible. Please contact The National Archives" +
            " to request a specialist assessment.", "Contact us", "Contact us", null)]
        [NUnit.Framework.TestCaseAttribute("C513426", "(//a[@class=\'discoveryPrimaryCallToActionLink\'])[2]", "(//div[@class=\'order-option-wrapper\'])[3]", "In rare cases, access might not be possible. Please contact The National Archives" +
            " to request a specialist assessment.", "contact", "Contact us", null)]
        public virtual void Unfit(string iaId, string xPathDO, string xPath, string message, string button, string title, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("iaId", iaId);
            argumentsOfScenario.Add("xPathDO", xPathDO);
            argumentsOfScenario.Add("xPath", xPath);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("button", button);
            argumentsOfScenario.Add("title", title);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unfit", null, tagsOfScenario, argumentsOfScenario);
#line 470
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 471
 testRunner.Given(string.Format("I am on delivery options page \"{0}\"", iaId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 472
 testRunner.When(string.Format("click on view delivery options presented to other users \"{0}\"", xPathDO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 473
 testRunner.And(string.Format("check the \"{0}\" for staffin \"{1}\"", message, xPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 474
 testRunner.Then(string.Format("click on the \"{0}\"", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 475
 testRunner.And(string.Format("check for the page \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
